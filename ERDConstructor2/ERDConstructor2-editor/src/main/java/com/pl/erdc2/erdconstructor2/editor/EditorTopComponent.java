package com.pl.erdc2.erdconstructor2.editor;

import com.pl.erdc2.erdconstructor2.api.ColumnChildFactory;
import com.pl.erdc2.erdconstructor2.api.Entity;
import com.pl.erdc2.erdconstructor2.api.EntityExplorerManagerProvider;
import com.pl.erdc2.erdconstructor2.api.EntityNode;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.IntrospectionException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.pl.erdc2.erdconstructor2.editor//editor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        iconBase = "com/pl/erdc2/erdconstructor2/editor/graphIcon2.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.pl.erdc2.erdconstructor2.editor.EditorTopComponent")
@ActionReference(path = "Menu/Window" , position = 1)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_editorAction",
        preferredID = "editorTopComponent"
)
@Messages({
    "CTL_editorAction=Diagram editor",
    "CTL_editorTopComponent=Diagram editor",
    "HINT_editorTopComponent=This is a erd diagram editor window"
})
public final class EditorTopComponent extends TopComponent implements LookupListener{
    private final ExplorerManager em;
    GraphSceneImpl scene;
    public EditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_editorTopComponent());
        setToolTipText(Bundle.HINT_editorTopComponent());
        setLayout(new BorderLayout());

        em = EntityExplorerManagerProvider.getInstance().getExplorerManager();
        
        scene = new GraphSceneImpl();
        JScrollPane shapePane = new JScrollPane();
        shapePane.setViewportView(scene.createView());
        
        JToolBar toolbar = new JToolBar();
        
        Image addEntityImage = ImageUtilities.loadImage("com/pl/erdc2/erdconstructor2/editor/addEntityIcon.png");
        JButton addEntityButton = new JButton("", new ImageIcon(addEntityImage));
        addEntityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    addEntityButtonActionPerformed(evt);
                } catch (IntrospectionException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
        toolbar.add(addEntityButton);
        toolbar.addSeparator();
        
        add(shapePane, BorderLayout.CENTER);
        add(toolbar, BorderLayout.NORTH);
        
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    Lookup.Result<Entity> entitesLookup;

    @Override
    public void resultChanged(LookupEvent ev) {
        if(!entitesLookup.allInstances().isEmpty()){
            this.repaint();
        } 
    }
    
    @Override
    public void componentOpened() {
        entitesLookup = Utilities.actionsGlobalContext().lookupResult(Entity.class);
        entitesLookup.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        entitesLookup.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void addEntityButtonActionPerformed(ActionEvent evt) throws IntrospectionException {
        if(em!=null){
            Entity en = new Entity();
            EntityNode node = new EntityNode(en, Children.create(new ColumnChildFactory(), true));
            Node[] toAdd = {node};
            em.getRootContext().getChildren().add(toAdd);
        }
    } 
}
