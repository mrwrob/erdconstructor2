package com.pl.erdc2.erdconstructor2.columneditor;

import com.pl.erdc2.erdconstructor2.api.Column;
import com.pl.erdc2.erdconstructor2.api.ColumnNode;
import com.pl.erdc2.erdconstructor2.api.EntityNode;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.IntrospectionException;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.pl.erdc2.erdconstructor2.columneditor//ColumnEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ColumnEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "com.pl.erdc2.erdconstructor2.columneditor.ColumnEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ColumnEditorAction",
        preferredID = "ColumnEditorTopComponent"
)
@Messages({
    "CTL_ColumnEditorAction=Column Editor",
    "CTL_ColumnEditorTopComponent=Column editor window",
    "HINT_ColumnEditorTopComponent=This is a column editor window",
    "Add_Column_Button=New column"
})
public final class ColumnEditorTopComponent extends TopComponent  implements LookupListener{
    JTable table;
    JLabel entityLablel;
    JScrollPane tablePanel;
    JButton addButton;
    
    Lookup.Result<EntityNode> entitesLookup;
    EntityNode selectedNode = null;
    
    public ColumnEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ColumnEditorTopComponent());
        setToolTipText(Bundle.HINT_ColumnEditorTopComponent());
        
        setLayout(new GridBagLayout());

        table = new JTable();
        table.setModel(new ColumnTableItemModel());
        JComboBox comboBox = new JComboBox();
        for(String s : Column.DATA_TYPES)
            comboBox.addItem(s);
        comboBox.setEditable(true);
        table.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));
        table.getColumnModel().getColumn(1).setPreferredWidth(120);
        table.getColumnModel().getColumn(2).setPreferredWidth(30);
        table.getColumnModel().getColumn(3).setPreferredWidth(300);
        table.setRowHeight(22);
        tablePanel = new JScrollPane(table);  
        
        entityLablel = new JLabel();
        entityLablel.setText("");
        entityLablel.setFont(new Font("Calibri", Font.PLAIN, 17));
        
        addButton = new JButton();
        addButton.setEnabled(false);
        addButton.setText(Bundle.Add_Column_Button());
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addNewColumn();
            }
        });
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5,15,0,15);
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.LINE_START;
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(entityLablel, gbc);
        gbc.gridx = 1;
        add(addButton, gbc);
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 14;
        gbc.weightx = 4;
        gbc.fill = GridBagConstraints.BOTH;
        add(tablePanel, gbc);
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private void addNewColumn(){
        if(selectedNode==null)
            return;
        
        Column toAdd = new Column();
        try {
            ColumnNode cn = new ColumnNode(toAdd);
            Node[] nodesAdd = {cn};
            selectedNode.getChildren().add(nodesAdd);
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        }
        updateTable();                
    }
    
    public void updateTable(){
        if(selectedNode==null)
            return;
        
        ColumnTableItemModel model = (ColumnTableItemModel) table.getModel();
        model.clear();

        for(Node n : selectedNode.getChildren().getNodes()){
            Column col = n.getLookup().lookup(Column.class);
            if(col!=null)
                model.add(col);
        }
        
        addButton.setEnabled(true);
        entityLablel.setText(selectedNode.getDisplayName());
        model.fireTableDataChanged();
    }
    
    @Override
    public void componentOpened() {
        entitesLookup = Utilities.actionsGlobalContext().lookupResult(EntityNode.class);
        entitesLookup.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        entitesLookup.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    


    @Override
    public void resultChanged(LookupEvent ev) {
        if(entitesLookup.allItems().size()!=1)
            return;
        selectedNode = entitesLookup.allInstances().iterator().next();    
        updateTable();
    }
    
    
}
